import pdb
import os

 
googletest_framework_root = "/home/amoe/vcs/googletest"

googletest_include_paths = [
    googletest_framework_root + "/googletest",
    googletest_framework_root + "/googletest/include",
    googletest_framework_root + "/googlemock",
    googletest_framework_root + "/googlemock/include"
]

gtest_all_path = googletest_framework_root + "/googletest/src/gtest-all.cc"
gmock_all_path = googletest_framework_root + "/googlemock/src/gmock-all.cc"


env = Environment(
#    CXX='clang',
    CXX='g++',
    CPPPATH=googletest_include_paths + ['#src'],
    CCFLAGS=['-Wall',  '-Wno-deprecated-declarations', '-ggdb', '-g', '-std=c++14'],
    LIBS=[
        'pthread',
        'jsoncpp',
        'curl',
        'm',
        'stdc++',
        'boost_iostreams'   # for LineReader
    ]
)

# This enables colour error messages from gcc
maybe_term = os.environ.get('TERM')
if maybe_term:
    env['ENV']['TERM'] = maybe_term


env.MergeFlags(["!pkg-config --cflags jsoncpp"])

gtest_obj = env.Object(gtest_all_path)
gmock_obj = env.Object(gmock_all_path)

KEY_FILE_PATH = '#.mapquest_api_key'

def get_key(source_path):
    real_path = File(source_path).abspath
    with open(real_path, 'r') as f:
        version = f.read().rstrip()
    return version

def version_action(target, source, env):
    source_path = source[0].path
    target_path = target[0].path

    version_c_text = """
    #include "mapquest_api_key.hh"

    const char* const MAPQUEST_API_KEY = "%s";
    """ % get_key(source_path)

    with open(target_path, 'w') as f:
        f.write(version_c_text)

    return 0

KEYCC = 'mapquest_api_key.cc'

# Build API key source file using the special action
env.Command(
    target='mapquest_api_key.cc',
    source=KEY_FILE_PATH,
    action=version_action
)
key_obj = env.Object('mapquest_api_key.cc')


# "programs" is also a subdirectory of the build dir, containing the finished
# binaries, but the glob pattern itself excludes this directory.
for chapter_directory in env.Glob('chapter*', strings=True):
    chapter_name = os.path.basename(chapter_directory)
    pattern = chapter_directory + '/example*'
    for exercise_directory in env.Glob(pattern, strings=True):
        exercise_name = os.path.basename(exercise_directory)
        source_pattern = exercise_directory + '/*.cc'
        sources = env.Glob(source_pattern)
        full_path = 'programs/{}-{}'.format(chapter_name, exercise_name)
        
        if sources:
            env.Program(full_path, sources + [gtest_obj, gmock_obj, KEYCC])
